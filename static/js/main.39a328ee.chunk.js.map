{"version":3,"sources":["components/SearchBar.js","apis/youtube.js","components/VideoItem.js","components/VideoList.js","components/VideoDetail.js","components/TextAreaNew.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchBar","onInputChange","event","_this","setState","term","target","value","onFormSubmit","preventDefault","props","state","react_default","a","createElement","className","onSubmit","this","type","onChange","React","Component","axios","create","baseURL","params","part","maxResults","key","VideoItem","_ref","video","onVideoSelect","onClick","alt","snippet","title","src","thumbnails","medium","url","VideoList","videos","renderedList","map","src_components_VideoItem","id","videoId","width100","width","height","VideoDetail","videoSrc","concat","style","description","TextAreaNew","ts","apiKey","initialValue","selector","theme","init","plugins","toolbar","App","selectedVideo","onTermSubmit","_callee","response","regenerator_default","wrap","_context","prev","next","youtube","get","q","sent","data","items","stop","components_SearchBar","components_VideoDetail","components_TextAreaNew","components_VideoList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39a328ee.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass SearchBar extends React.Component{\n    \n    onInputChange = (event) => {\n        this.setState({ term: event.target.value })\n    };\n\n    onFormSubmit = event => {\n        // keeps the page from refreshing on return\n        event.preventDefault();\n\n        // call callback from parent component\n        this.props.onFormSubmit(this.state.term);\n\n    };\n\n    render() {\n        return (\n            <div className=\"search-bar ui segment\">\n                <form onSubmit={this.onFormSubmit} className=\"form-group ui form\">\n                    <div className=\"field form-group\">\n                    <label>Video Search</label>\n                    <input\n                    className=\"form-control\" \n                    type=\"text\" \n                    onChange={this.onInputChange}\n                    />\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;\n","import axios from 'axios';\n\n// constant value that should NOT be changed\nconst KEY = 'AIzaSyB6kmzWeuzi6xLit8SSCmQjQBy3p2Y3CVY';\n\nexport default axios.create({\n    baseURL: 'https://www.googleapis.com/youtube/v3/',\n    params: {\n        part: 'snippet', \n        maxResults: 5,\n        key: KEY\n    }\n}); \n","import './VideoItem.css';\nimport React from 'react';\n\nconst VideoItem = ({ video, onVideoSelect }) => {\n    return (\n        <div onClick={ () => onVideoSelect(video) } className=\"row\">\n            <div className=\"col-md-6\">\n                <img alt={video.snippet.title} className=\"ui image\" src={video.snippet.thumbnails.medium.url} />\n            </div>\n            <div className=\"col-md-6\">\n                <div className=\"header\">{video.snippet.title}</div> \n            </div>\n        </div>\n    )\n};\n\nexport default VideoItem;","import React from 'react';\nimport VideoItem from './VideoItem';\n\n\nconst VideoList = ({ videos, onVideoSelect }) => {\n    \n    // creates a list of video items into a video list\n    // 1. video = the prop, 2. {video} is the object we pass as a prop\n    const renderedList = videos.map(video => {\n        return <VideoItem key={video.id.videoId} onVideoSelect={onVideoSelect} video={video} />;\n    });\n\n    // props.videos - array of different records that we want to render out\n    // onto the screen\n\n    return <div>{renderedList}</div>\n};\n\nexport default VideoList;\n","import React from 'react';\n\nconst width100 = {\n    width: '100%',\n    height: '390px'\n};\nconst VideoDetail = ({ video }) => {\n    if (!video) {\n        return <div className=\"loading\">Loading...</div>\n    }\n\n    const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\n\n    return (\n        <div>\n            <div>\n                <iframe style={width100} title=\"video player\" src={videoSrc}></iframe>\n            </div>\n            <div className=\"ui segment\">\n                <h4 className=\"ui header\">{video.snippet.title}</h4>\n                <p>{video.snippet.description}</p>\n            </div>\n        </div>\n    ) \n};\n\nexport default VideoDetail;","import React from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n// each new component MUST return a value\nconst TextAreaNew = ({ video }) => {\n    if (!video) {\n        return <div className=\"loading\">Loading Title...</div>\n    } \n        return (\n            <div className=\"textArea\">\n                <Editor\n                    apiKey='8rp4hn347wu0de5xdlo0m1desvvv52rfiyifi05ish51xzdg'\n                    initialValue=\"\"\n                    selector=\"textarea\"\n                    theme=\"modern\"\n                    id=\"tinyMCE\"\n                    init={{\n                        plugins: 'link code',\n                        toolbar: 'undo redo | bold italic | alignleft aligncenter alignright | code'\n                    }}\n                  \n                />\n                <br />\n            </div>\n        ); // end return\n    };\n\nexport default TextAreaNew;","import React from 'react';\nimport SearchBar from './SearchBar';\nimport youtube from '../apis/youtube';\nimport VideoList from './VideoList';\nimport VideoDetail from './VideoDetail';\nimport TextAreaNew from './TextAreaNew';\nimport '../App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nclass App extends React.Component {\n  // array of videos that we fetch\n  state = { videos: [], selectedVideo: null };\n  \n  // default search when app is rendered\n  componentDidMount(){\n    this.onTermSubmit('dogs');\n  }\n\n  onTermSubmit = async term => {\n    const response = await youtube.get('/search', {\n      params: {\n        q: term\n      }\n    });\n\n    // set the new 'state' of the videos variable by populating the variable\n    this.setState({\n      videos: response.data.items,\n      selectedVideo: response.data.items[0]\n    })\n  };\n\n  onVideoSelect = video => {\n    this.setState({ selectedVideo: video });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <SearchBar onFormSubmit={this.onTermSubmit} />\n        <div className=\"grid\">\n          <div className=\"row\">\n            \n            <div className=\"col-md-8\">\n              <VideoDetail video={this.state.selectedVideo} />\n            </div>\n            <div className=\"col-md-4\">\n              <TextAreaNew video={this.state.selectedVideo} />\n            </div>\n\n          </div>\n          <div className=\"row\">\n              <VideoList onVideoSelect={this.onVideoSelect} videos={this.state.videos} />\n            </div>\n        </div>\n      </div>\n    )\n  }\n  \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}